using NUnit.Framework;
using ClassLibrary1.Setup;
using System.Diagnostics;
using FlaUI.UIA3;
using FlaUI.Core;
using System;

namespace ClassLibrary1.Tests
{
    [TestFixture]
    public class RevitDialogTests : RevitTestSetup
    {
        [Test]
        public void TestRevitCompleteWorkflow()
        {
            // Test n√†y s·∫Ω th·ª±c hi·ªán to√†n b·ªô lu·ªìng: Revit ‚Üí Trial Dialog ‚Üí Security Dialog ‚Üí Project
            Console.WriteLine(" === TEST REVIT HO√ÄN CH·ªàNH - LU·ªíNG ƒê·∫¶Y ƒê·ª¶ ===");
            
            try
            {
                // B∆Ø·ªöC 1: Ki·ªÉm tra Revit ƒë√£ s·∫µn s√†ng
                Console.WriteLine("üîç B∆Ø·ªöC 1: Ki·ªÉm tra Revit ƒë√£ s·∫µn s√†ng...");
                Assert.That(mainWindow, Is.Not.Null, "Main window ph·∫£i t·ªìn t·∫°i");
                Assert.That(revitApp, Is.Not.Null, "Revit app ph·∫£i t·ªìn t·∫°i");
                Assert.That(!revitApp!.HasExited, "Revit app ph·∫£i ƒëang ch·∫°y");
                Assert.That(automation, Is.Not.Null, "Automation ph·∫£i t·ªìn t·∫°i");
                
                Console.WriteLine($"‚úÖ Main window: {mainWindow!.Title}");
                Console.WriteLine("‚úÖ Revit app ƒëang ch·∫°y");
                Console.WriteLine("‚úÖ Automation ho·∫°t ƒë·ªông");
                
                // B∆Ø·ªöC 2: X·ª≠ l√Ω trial dialog (n·∫øu c√≥)
                Console.WriteLine("üîç B∆Ø·ªöC 2: X·ª≠ l√Ω trial dialog...");
                var trialHandled = DialogHandlers.HandleTrialDialog(mainWindow);
                if (trialHandled)
                {
                    Console.WriteLine("‚úÖ Trial dialog ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω");
                }
                else
                {
                    Console.WriteLine("‚ÑπÔ∏è Kh√¥ng c√≥ trial dialog ƒë·ªÉ x·ª≠ l√Ω");
                }
                
                // Ch·ªù m·ªôt ch√∫t sau khi x·ª≠ l√Ω trial dialog
                System.Threading.Thread.Sleep(1000); // Gi·∫£m t·ª´ 3000ms xu·ªëng 1000ms
                
                // B∆Ø·ªöC 3: X·ª≠ l√Ω security dialog (n·∫øu c√≥)
                Console.WriteLine("üîç B∆Ø·ªöC 3: X·ª≠ l√Ω security dialog...");
                var securityHandled = DialogHandlers.HandleSecurityDialog(mainWindow);
                if (securityHandled)
                {
                    Console.WriteLine("‚úÖ Security dialog ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω");
                }
                else
                {
                    Console.WriteLine("‚ÑπÔ∏è Kh√¥ng c√≥ security dialog ƒë·ªÉ x·ª≠ l√Ω");
                }
                
                // Ch·ªù m·ªôt ch√∫t sau khi x·ª≠ l√Ω security dialog
                System.Threading.Thread.Sleep(1000); // Gi·∫£m t·ª´ 3000ms xu·ªëng 1000ms
                
                // B∆Ø·ªöC 4: Ki·ªÉm tra xem ƒë√£ c√≥ project n√†o ƒë∆∞·ª£c m·ªü ch∆∞a
                Console.WriteLine("üîç B∆Ø·ªöC 4: Ki·ªÉm tra project hi·ªán t·∫°i...");
                var projectLoaded = DialogHandlers.IsProjectLoaded(mainWindow);
                
                if (projectLoaded)
                {
                    Console.WriteLine("‚úÖ Project ƒë√£ ƒë∆∞·ª£c load - kh√¥ng c·∫ßn l√†m g√¨ th√™m");
                }
                else
                {
                    Console.WriteLine("‚ö†Ô∏è Ch∆∞a c√≥ project n√†o ƒë∆∞·ª£c load - c·∫ßn v√†o project");
                    
                    // B∆Ø·ªöC 5: T·ª± ƒë·ªông v√†o project
                    Console.WriteLine("üîç B∆Ø·ªöC 5: T·ª± ƒë·ªông v√†o project...");
                    DialogHandlers.AutoEnterProject(mainWindow);
                    
                    // Ch·ªù project load
                    Console.WriteLine("‚è≥ Ch·ªù project load (3 gi√¢y)..."); // Gi·∫£m t·ª´ 8s xu·ªëng 3s
                    System.Threading.Thread.Sleep(3000);
                    
                    // Ki·ªÉm tra l·∫°i xem project ƒë√£ load ch∆∞a
                    projectLoaded = DialogHandlers.IsProjectLoaded(mainWindow);
                    if (projectLoaded)
                    {
                        Console.WriteLine("‚úÖ Project ƒë√£ load th√†nh c√¥ng sau khi t·ª± ƒë·ªông v√†o");
                    }
                    else
                    {
                        Console.WriteLine("‚ö†Ô∏è Project v·∫´n ch∆∞a load - th·ª≠ l·∫°i...");
                        System.Threading.Thread.Sleep(2000); // Gi·∫£m t·ª´ 5000ms xu·ªëng 2000ms
                        projectLoaded = DialogHandlers.IsProjectLoaded(mainWindow);
                        if (projectLoaded)
                        {
                            Console.WriteLine("‚úÖ Project ƒë√£ load th√†nh c√¥ng sau khi th·ª≠ l·∫°i");
                        }
                        else
                        {
                            Console.WriteLine("‚ùå Kh√¥ng th·ªÉ load project - c√≥ th·ªÉ c√≥ v·∫•n ƒë·ªÅ");
                        }
                    }
                }
                
                // B∆Ø·ªöC 6: Ki·ªÉm tra cu·ªëi c√πng - ƒê∆†N GI·∫¢N H√ìA
                Console.WriteLine("üîç B∆Ø·ªöC 6: Ki·ªÉm tra cu·ªëi c√πng...");
                
                // Ki·ªÉm tra xem c√≥ ribbon bar kh√¥ng (d·∫•u hi·ªáu project ƒë√£ load)
                var ribbonBar = mainWindow.FindFirstDescendant(cf => 
                    cf.ByControlType(FlaUI.Core.Definitions.ControlType.ToolBar).And(cf.ByName("Ribbon")));
                
                if (ribbonBar != null)
                {
                    Console.WriteLine("‚úÖ T√¨m th·∫•y Ribbon bar - Revit ƒë√£ s·∫µn s√†ng l√†m vi·ªác");
                }
                else
                {
                    Console.WriteLine("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Ribbon bar - c√≥ th·ªÉ ch∆∞a v√†o project");
                }
                
                // X√ìA: Ki·ªÉm tra tabs v√† menus - kh√¥ng c·∫ßn thi·∫øt, l√†m ch·∫≠m test
                
                Console.WriteLine(" === TEST REVIT HO√ÄN CH·ªàNH TH√ÄNH C√îNG ===");
                Console.WriteLine("‚úÖ Revit ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông");
                Console.WriteLine("‚úÖ Dialogs ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω");
                Console.WriteLine("‚úÖ Project ƒë√£ ƒë∆∞·ª£c load");
                Console.WriteLine("‚úÖ S·∫µn s√†ng cho vi·ªác test ti·∫øp theo");
                
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói trong test: {ex.Message}");
                Console.WriteLine($"‚ùå Stack trace: {ex.StackTrace}");
                throw;
            }
        }
    }
}
