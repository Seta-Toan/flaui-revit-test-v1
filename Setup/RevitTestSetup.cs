using NUnit.Framework;
using FlaUI.Core;
using FlaUI.UIA3;
using FlaUI.Core.AutomationElements;
using FlaUI.Core.Definitions;
using System.Diagnostics;
using System;
using ClassLibrary1.Setup;

namespace ClassLibrary1.Setup
{
    [TestFixture]
    public abstract class RevitTestSetup
    {
        protected FlaUI.Core.Application? revitApp;
        protected UIA3Automation? automation;
        protected Window? mainWindow;
        protected Process? revitProcess;

        [OneTimeSetUp]
        public virtual void OneTimeSetup()
        {
            try
            {
                var totalStartTime = DateTime.Now;
                Console.WriteLine(" === ONETIME SETUP: Kh·ªüi ƒë·ªông Revit m·ªôt l·∫ßn duy nh·∫•t ===");
                
                // X√ìA: Kh√¥ng c·∫ßn kill t·∫•t c·∫£ Revit processes
                // Console.WriteLine("üîÑ ƒê√≥ng t·∫•t c·∫£ Revit instances...");
                // ProcessManager.KillAllRevitProcesses();
                // System.Threading.Thread.Sleep(1000);
                
                // Kh·ªüi ƒë·ªông Revit m·ªôt l·∫ßn duy nh·∫•t
                var revitStartTime = DateTime.Now;
                Console.WriteLine(" Kh·ªüi ƒë·ªông Revit...");
                var processStartInfo = new ProcessStartInfo(@"D:\Revit\Autodesk\Revit 2026\Revit.exe")
                {
                    UseShellExecute = true,
                    WorkingDirectory = @"D:\Revit\Autodesk\Revit 2026\"
                };
                
                revitApp = FlaUI.Core.Application.Launch(processStartInfo);
                revitProcess = Process.GetProcessById(revitApp.ProcessId);
                automation = new UIA3Automation();
                
                Console.WriteLine($"‚úÖ Revit started v·ªõi PID: {revitApp.ProcessId}");
                
                // Ch·ªù Revit kh·ªüi ƒë·ªông v·ªõi timeout ng·∫Øn h∆°n
                Console.WriteLine("‚è≥ Ch·ªù Revit kh·ªüi ƒë·ªông (2 gi√¢y)..."); // Gi·∫£m t·ª´ 5s xu·ªëng 2s
                System.Threading.Thread.Sleep(2000);
                
                var revitTime = DateTime.Now - revitStartTime;
                Console.WriteLine($"‚è±Ô∏è Th·ªùi gian Revit kh·ªüi ƒë·ªông: {revitTime.TotalSeconds:F1}s");
                
                // B∆Ø·ªöC 1: X·ª≠ l√Ω trial dialog v·ªõi timeout
                var trialStartTime = DateTime.Now;
                Console.WriteLine("üîÑ B∆Ø·ªöC 1: X·ª≠ l√Ω trial dialog...");
                DialogHandlers.HandleTrialDialogInSetup(automation);
                
                var trialTime = DateTime.Now - trialStartTime;
                Console.WriteLine($"‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω trial dialog: {trialTime.TotalSeconds:F1}s");
                
                // Ch·ªù th√™m v√† B∆Ø·ªöC 2: X·ª≠ l√Ω security dialog
                Console.WriteLine("‚è≥ Ch·ªù th√™m (0.5 gi√¢y) r·ªìi x·ª≠ l√Ω security dialog..."); // Gi·∫£m t·ª´ 2s xu·ªëng 0.5s
                System.Threading.Thread.Sleep(500);
                
                var securityStartTime = DateTime.Now;
                Console.WriteLine("üîÑ B∆Ø·ªöC 2: X·ª≠ l√Ω security dialog...");
                DialogHandlers.HandleSecurityDialogInSetup(automation);
                
                var securityTime = DateTime.Now - securityStartTime;
                Console.WriteLine($"‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω security dialog: {securityTime.TotalSeconds:F1}s");
                
                // B√¢y gi·ªù m·ªõi t√¨m main window
                Console.WriteLine("üîç T√¨m main window sau khi x·ª≠ l√Ω dialogs...");
                System.Threading.Thread.Sleep(200); // Gi·∫£m t·ª´ 1000ms xu·ªëng 200ms
                
                // Ki·ªÉm tra xem Revit ƒë√£ s·∫µn s√†ng ch∆∞a
                if (!IsRevitReady(revitApp!, automation))
                {
                    Console.WriteLine("‚ö†Ô∏è Revit ch∆∞a s·∫µn s√†ng, ch·ªù th√™m (1 gi√¢y)..."); // Gi·∫£m t·ª´ 3s xu·ªëng 1s
                    System.Threading.Thread.Sleep(1000);
                }
                
                // T√¨m main window v·ªõi retry mechanism
                var mainWindowStartTime = DateTime.Now;
                mainWindow = FindMainWindowWithRetry(revitApp!, automation);
                Assert.That(mainWindow, Is.Not.Null, "Kh√¥ng t√¨m th·∫•y c·ª≠a s·ªï ch√≠nh c·ªßa Revit.");
                
                var mainWindowTime = DateTime.Now - mainWindowStartTime;
                Console.WriteLine($"‚úÖ Main window found: {mainWindow!.Title}");
                Console.WriteLine($"‚è±Ô∏è Th·ªùi gian t√¨m main window: {mainWindowTime.TotalSeconds:F1}s");
                
                // Ch·ªù th√™m ƒë·ªÉ Revit ho√†n to√†n s·∫µn s√†ng
                Console.WriteLine("‚è≥ Ch·ªù Revit ·ªïn ƒë·ªãnh (0.5 gi√¢y)..."); // Gi·∫£m t·ª´ 2s xu·ªëng 0.5s
                System.Threading.Thread.Sleep(500);
                
                // B∆Ø·ªöC 3: T·ª± ƒë·ªông v√†o project sau khi x·ª≠ l√Ω dialogs
                var projectStartTime = DateTime.Now;
                Console.WriteLine("üîÑ B∆Ø·ªöC 3: T·ª± ƒë·ªông v√†o project...");
                DialogHandlers.AutoEnterProject(mainWindow);
                
                // Ch·ªù project load xong v√† ki·ªÉm tra
                Console.WriteLine("‚è≥ Ch·ªù project load (1 gi√¢y)..."); // Gi·∫£m t·ª´ 3s xu·ªëng 1s
                System.Threading.Thread.Sleep(1000);
                
                // Ki·ªÉm tra xem project ƒë√£ load th√†nh c√¥ng ch∆∞a
                var projectLoaded = DialogHandlers.IsProjectLoaded(mainWindow);
                if (projectLoaded)
                {
                    Console.WriteLine("‚úÖ OneTimeSetup: Project ƒë√£ load th√†nh c√¥ng");
                }
                else
                {
                    Console.WriteLine("‚ö†Ô∏è OneTimeSetup: Project c√≥ th·ªÉ ch∆∞a load ho√†n to√†n, ch·ªù th√™m (1 gi√¢y)..."); // Gi·∫£m t·ª´ 3s xu·ªëng 1s
                    System.Threading.Thread.Sleep(1000);
                    
                    // Ki·ªÉm tra l·∫°i
                    projectLoaded = DialogHandlers.IsProjectLoaded(mainWindow);
                    if (projectLoaded)
                    {
                        Console.WriteLine("‚úÖ OneTimeSetup: Project ƒë√£ load th√†nh c√¥ng sau khi ch·ªù th√™m");
                    }
                    else
                    {
                        Console.WriteLine("‚ö†Ô∏è OneTimeSetup: Kh√¥ng th·ªÉ x√°c nh·∫≠n project ƒë√£ load");
                    }
                }
                
                var projectTime = DateTime.Now - projectStartTime;
                Console.WriteLine($"‚è±Ô∏è Th·ªùi gian v√†o project: {projectTime.TotalSeconds:F1}s");
                
                var totalTime = DateTime.Now - totalStartTime;
                Console.WriteLine("‚úÖ OneTimeSetup: Ho√†n t·∫•t setup Revit m·ªôt l·∫ßn duy nh·∫•t");
                Console.WriteLine($"‚è±Ô∏è T·ªïng th·ªùi gian OneTimeSetup: {totalTime.TotalSeconds:F1}s");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói trong OneTimeSetup: {ex.Message}");
                CleanupRevit();
                throw;
            }
        }

        private Window? FindMainWindowWithRetry(FlaUI.Core.Application app, UIA3Automation automation)
        {
            const int maxRetries = 2; // Gi·∫£m t·ª´ 5 xu·ªëng 2
            const int timeoutSeconds = 10; // Gi·∫£m t·ª´ 30s xu·ªëng 10s
            
            for (int attempt = 1; attempt <= maxRetries; attempt++)
            {
                try
                {
                    Console.WriteLine($"L·∫ßn th·ª≠ {attempt}/{maxRetries}: T√¨m main window v·ªõi timeout {timeoutSeconds}s...");
                    
                    var window = app.GetMainWindow(automation, TimeSpan.FromSeconds(timeoutSeconds));
                    if (window != null)
                    {
                        Console.WriteLine($"‚úì T√¨m th·∫•y main window ·ªü l·∫ßn th·ª≠ {attempt}");
                        return window;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"L·∫ßn th·ª≠ {attempt} th·∫•t b·∫°i: {ex.Message}");
                    
                    if (attempt < maxRetries)
                    {
                        Console.WriteLine($"Ch·ªù 2 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i..."); // Gi·∫£m t·ª´ 10s xu·ªëng 2s
                        System.Threading.Thread.Sleep(2000);
                    }
                }
            }
            
            Console.WriteLine($"‚úó Kh√¥ng th·ªÉ t√¨m th·∫•y main window sau {maxRetries} l·∫ßn th·ª≠");
            return null;
        }

        [SetUp]
        public virtual void Setup()
        {
            try
            {
                Console.WriteLine("=== SETUP: Ki·ªÉm tra Revit ƒë√£ s·∫µn s√†ng ===");
                
                // Ki·ªÉm tra xem Revit c√≥ c√≤n ch·∫°y kh√¥ng
                if (revitApp == null || revitApp.HasExited || mainWindow == null)
                {
                    Console.WriteLine("Revit ƒë√£ b·ªã ƒë√≥ng, kh·ªüi ƒë·ªông l·∫°i...");
                    OneTimeSetup();
                    return;
                }
                
                // Ki·ªÉm tra xem main window c√≥ c√≤n hi·ªÉn th·ªã kh√¥ng
                try
                {
                    var isVisible = mainWindow!.Properties.IsOffscreen;
                    if (isVisible)
                    {
                        Console.WriteLine("Main window kh√¥ng hi·ªÉn th·ªã, kh·ªüi ƒë·ªông l·∫°i...");
                        OneTimeSetup();
                        return;
                    }
                }
                catch
                {
                    Console.WriteLine("Kh√¥ng th·ªÉ ki·ªÉm tra main window, kh·ªüi ƒë·ªông l·∫°i...");
                    OneTimeSetup();
                    return;
                }
                
                Console.WriteLine("‚úì Revit ƒë√£ s·∫µn s√†ng, ti·∫øp t·ª•c test");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"L·ªói trong Setup: {ex.Message}");
                OneTimeSetup(); // Fallback
            }
        }

        private bool IsRevitReady(FlaUI.Core.Application app, UIA3Automation automation)
        {
            try
            {
                // Ki·ªÉm tra xem c√≥ process n√†o ƒëang ch·∫°y kh√¥ng
                if (app.HasExited)
                {
                    Console.WriteLine("Revit app ƒë√£ tho√°t");
                    return false;
                }
                
                // Ki·ªÉm tra xem process c√≥ c√≤n ho·∫°t ƒë·ªông kh√¥ng
                var process = Process.GetProcessById(app.ProcessId);
                if (process.HasExited)
                {
                    Console.WriteLine("Revit process ƒë√£ tho√°t");
                    return false;
                }
                
                // Ki·ªÉm tra xem c√≥ th·ªÉ t√¨m th·∫•y desktop elements kh√¥ng
                var desktop = automation.GetDesktop();
                var revitWindows = desktop.FindAllDescendants(cf => 
                    cf.ByControlType(ControlType.Window).And(cf.ByName("Revit")));
                
                if (revitWindows.Length > 0)
                {
                    Console.WriteLine($"T√¨m th·∫•y {revitWindows.Length} Revit windows");
                    return true;
                }
                
                // Ki·ªÉm tra xem c√≥ window n√†o c√≥ t√™n ch·ª©a "Revit" kh√¥ng
                var allWindows = desktop.FindAllDescendants(cf => cf.ByControlType(ControlType.Window));
                foreach (var window in allWindows)
                {
                    try
                    {
                        var name = window.Name;
                        if (!string.IsNullOrEmpty(name) && name.Contains("Revit"))
                        {
                            Console.WriteLine($"T√¨m th·∫•y Revit window: '{name}'");
                            return true;
                        }
                    }
                    catch
                    {
                        // B·ªè qua l·ªói khi ƒë·ªçc t√™n window
                    }
                }
                
                Console.WriteLine("Kh√¥ng t√¨m th·∫•y Revit windows");
                return false;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"L·ªói khi ki·ªÉm tra Revit ready: {ex.Message}");
                return false;
            }
        }

        [TearDown]
        public virtual void Teardown()
        {
            Console.WriteLine("=== TEARDOWN: Ki·ªÉm tra tr·∫°ng th√°i Revit ===");
            
            // KH√îNG ƒë√≥ng Revit sau m·ªói test
            // Ch·ªâ ki·ªÉm tra xem Revit c√≥ c√≤n ho·∫°t ƒë·ªông kh√¥ng
            try
            {
                if (revitApp != null && !revitApp.HasExited && mainWindow != null)
                {
                    Console.WriteLine("‚úì Revit v·∫´n ho·∫°t ƒë·ªông, gi·ªØ nguy√™n cho test ti·∫øp theo");
                }
                else
                {
                    Console.WriteLine("‚ö† Revit ƒë√£ b·ªã ƒë√≥ng, s·∫Ω kh·ªüi ƒë·ªông l·∫°i trong test ti·∫øp theo");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"L·ªói khi ki·ªÉm tra tr·∫°ng th√°i Revit: {ex.Message}");
            }
        }

        [OneTimeTearDown]
        public virtual void OneTimeTearDown()
        {
            Console.WriteLine("=== ONETIME TEARDOWN: ƒê√≥ng Revit sau khi t·∫•t c·∫£ test ho√†n th√†nh ===");
            
            // ƒê√≥ng Revit sau khi t·∫•t c·∫£ test ho√†n th√†nh
            CleanupRevit();
            
            // ƒê·∫£m b·∫£o t·∫•t c·∫£ Revit processes ƒë·ªÅu ƒë∆∞·ª£c ƒë√≥ng
            // ProcessManager.KillAllRevitProcesses();
            
            Console.WriteLine("‚úì ƒê√£ ƒë√≥ng Revit v√† cleanup ho√†n t·∫•t");
        }

        protected virtual void CleanupRevit()
        {
            try
            {
                // ƒê√≥ng main window tr∆∞·ªõc
                if (mainWindow != null && !mainWindow.Properties.IsOffscreen)
                {
                    try
                    {
                        Console.WriteLine("ƒêang ƒë√≥ng main window...");
                        // Th·ª≠ g·ª≠i Alt+F4 ƒë·ªÉ ƒë√≥ng window
                        mainWindow.Focus();
                        System.Windows.Forms.SendKeys.SendWait("%{F4}");
                        System.Threading.Thread.Sleep(500); // Gi·∫£m t·ª´ 2000ms xu·ªëng 500ms
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Kh√¥ng th·ªÉ ƒë√≥ng main window: {ex.Message}");
                    }
                }

                // ƒê√≥ng application
                if (revitApp != null)
                {
                    try
                    {
                        Console.WriteLine("ƒêang ƒë√≥ng Revit application...");
                        revitApp.Close();
                        System.Threading.Thread.Sleep(1000); 
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Kh√¥ng th·ªÉ ƒë√≥ng application: {ex.Message}");
                    }
                }

                // Force kill process n·∫øu c·∫ßn
                if (revitProcess != null && !revitProcess.HasExited)
                {
                    try
                    {
                        Console.WriteLine("Force killing Revit process...");
                        revitProcess.Kill();
                        revitProcess.WaitForExit(2000); // Gi·∫£m t·ª´ 5000ms xu·ªëng 2000ms
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Kh√¥ng th·ªÉ kill process: {ex.Message}");
                    }
                }

                // Dispose automation
                if (automation != null)
                {
                    try
                    {
                        automation.Dispose();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Kh√¥ng th·ªÉ dispose automation: {ex.Message}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"L·ªói trong cleanup: {ex.Message}");
            }
            finally
            {
                revitApp = null;
                mainWindow = null;
                automation = null;
                revitProcess = null;
            }
        }
    }
}
