using FlaUI.Core;
using FlaUI.UIA3;
using FlaUI.Core.AutomationElements;
using FlaUI.Core.Conditions;
using FlaUI.Core.Definitions;
using System;
using WinForms = System.Windows.Forms;
using ClassLibrary1.Utilities;
using System.Linq;

namespace ClassLibrary1.Setup
{
    public static class DialogHandlers
    {
        public static void HandleTrialDialogInSetup(UIA3Automation automation)
        {
            try
            {
                Console.WriteLine("üîç B∆Ø·ªöC 1: T√¨m trial dialog...");
                var startTime = DateTime.Now;
                
                var desktop = automation.GetDesktop();
                AutomationElement? webViewDialog = null;
                
                // T√¨m ki·∫øm nhanh v·ªõi timeout ng·∫Øn
                Console.WriteLine(" T√¨m WebView dialog v·ªõi timeout ng·∫Øn...");
                
                // Method 1: T√¨m theo AutomationId (nhanh nh·∫•t) - GI·ªÆ L·∫†I
                try
                {
                    Console.WriteLine("üîç T√¨m theo AutomationId 'QApplication.WebView2BrowserDlg'...");
                    webViewDialog = desktop.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.Window).And(cf.ByAutomationId("QApplication.WebView2BrowserDlg")));
                    
                    if (webViewDialog != null)
                    {
                        Console.WriteLine($"‚úÖ T√¨m th·∫•y trial dialog theo AutomationId: '{webViewDialog.Name}'");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ö†Ô∏è L·ªói khi t√¨m theo AutomationId: {ex.Message}");
                }
                
                // Method 2: T√¨m theo t√™n n·∫øu Method 1 th·∫•t b·∫°i - GI·ªÆ L·∫†I
                if (webViewDialog == null)
                {
                    try
                    {
                        Console.WriteLine("üîç T√¨m theo t√™n 'WebView2 WebBrowser'...");
                        webViewDialog = desktop.FindFirstDescendant(cf => 
                            cf.ByControlType(ControlType.Window).And(cf.ByName("WebView2 WebBrowser")));
                        
                        if (webViewDialog != null)
                        {
                            Console.WriteLine($"‚úÖ T√¨m th·∫•y trial dialog theo t√™n: '{webViewDialog.Name}'");
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"‚ö†Ô∏è L·ªói khi t√¨m theo t√™n: {ex.Message}");
                    }
                }
                
                // X√ìA: Method 3 v√† 4 - Qu√° ch·∫≠m, kh√¥ng c·∫ßn thi·∫øt
                
                var searchTime = DateTime.Now - startTime;
                Console.WriteLine($"‚è±Ô∏è Th·ªùi gian t√¨m ki·∫øm trial dialog: {searchTime.TotalSeconds:F1}s");
                
                if (webViewDialog != null)
                {
                    Console.WriteLine($"‚úÖ T√¨m th·∫•y trial dialog: '{webViewDialog.Name}'");
                    
                    // X·ª≠ l√Ω nhanh: T√¨m n√∫t ƒë√≥ng
                    var closeStartTime = DateTime.Now;
                    var closeButton = FindCloseButtonInDialog(webViewDialog);
                    
                    if (closeButton != null)
                    {
                        Console.WriteLine($"‚úÖ T√¨m th·∫•y n√∫t ƒë√≥ng: '{closeButton.Name}' (Type: {closeButton.ControlType})");
                        try
                        {
                            Console.WriteLine("üñ±Ô∏è ƒêang click n√∫t ƒë√≥ng trial dialog...");
                            closeButton.Click();
                            System.Threading.Thread.Sleep(200); // Gi·∫£m t·ª´ 500ms xu·ªëng 200ms
                            Console.WriteLine("‚úÖ ƒê√£ click n√∫t ƒë√≥ng trial dialog th√†nh c√¥ng");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"‚ùå L·ªói khi click n√∫t ƒë√≥ng: {ex.Message}");
                            Console.WriteLine("üîÑ S·ª≠ d·ª•ng keyboard shortcut ESC...");
                            System.Windows.Forms.SendKeys.SendWait("{ESC}");
                            System.Threading.Thread.Sleep(200); // Gi·∫£m t·ª´ 500ms xu·ªëng 200ms
                            Console.WriteLine("‚úÖ ƒê√£ g·ª≠i ESC ƒë·ªÉ ƒë√≥ng trial dialog");
                        }
                    }
                    else
                    {
                        Console.WriteLine("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t ƒë√≥ng, s·ª≠ d·ª•ng ESC...");
                        System.Windows.Forms.SendKeys.SendWait("{ESC}");
                        System.Threading.Thread.Sleep(200); // Gi·∫£m t·ª´ 500ms xu·ªëng 200ms
                        Console.WriteLine("‚úÖ ƒê√£ g·ª≠i ESC ƒë·ªÉ ƒë√≥ng trial dialog");
                    }
                    
                    var closeTime = DateTime.Now - closeStartTime;
                    Console.WriteLine($"‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω trial dialog: {closeTime.TotalSeconds:F1}s");
                }
                else
                {
                    Console.WriteLine("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y trial dialog n√†o - ti·∫øp t·ª•c t√¨m security dialog");
                }
                
                var totalTime = DateTime.Now - startTime;
                Console.WriteLine($"‚è±Ô∏è T·ªïng th·ªùi gian x·ª≠ l√Ω trial dialog: {totalTime.TotalSeconds:F1}s");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói x·ª≠ l√Ω trial dialog: {ex.Message}");
            }
        }

        private static AutomationElement? FindCloseButtonInDialog(AutomationElement dialog)
        {
            try
            {
                Console.WriteLine("üîç ƒêang t√¨m n√∫t ƒë√≥ng trong dialog...");
                
                // Ch·ªâ t√¨m theo class name "btn-close no-outline" (n√∫t ƒë√≥ng th·ª±c s·ª±)
                var closeByClass = FindCloseButtonBySpecificClassName(dialog);
                if (closeByClass != null)
                {
                    Console.WriteLine("‚úÖ T√¨m th·∫•y n√∫t ƒë√≥ng theo class name");
                    return closeByClass;
                }
                
                Console.WriteLine("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y n√∫t ƒë√≥ng");
                return null;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi t√¨m n√∫t ƒë√≥ng: {ex.Message}");
                return null;
            }
        }

        private static AutomationElement? FindCloseButtonBySpecificClassName(AutomationElement dialog)
        {
            try
            {
                // Ch·ªâ t√¨m class name c·ª• th·ªÉ cho n√∫t ƒë√≥ng
                var specificClassNames = new[] { "btn-close no-outline" };
                
                Console.WriteLine("üîç T√¨m ki·∫øm n√∫t ƒë√≥ng theo class name 'btn-close no-outline'...");
                
                // V·ªõi WebView dialog, c·∫ßn t√¨m ki·∫øm kh√°c
                Console.WriteLine($"üîç Dialog type: {dialog.ControlType}, Name: '{dialog.Name}'");
                
                // T√¨m t·∫•t c·∫£ c√°c control c√≥ th·ªÉ click ƒë∆∞·ª£c
                var allControls = dialog.FindAllDescendants(cf => cf.ByControlType(ControlType.Button)
                    .Or(cf.ByControlType(ControlType.Hyperlink)).Or(cf.ByControlType(ControlType.Custom))
                    .Or(cf.ByControlType(ControlType.Image)));
                
                Console.WriteLine($"üîç T√¨m th·∫•y {allControls.Length} controls ƒë·ªÉ ki·ªÉm tra");
                
                // N·∫øu kh√¥ng t√¨m th·∫•y controls, th·ª≠ t√¨m theo c√°ch kh√°c
                if (allControls.Length == 0)
                {
                    Console.WriteLine("üîç Kh√¥ng t√¨m th·∫•y controls, th·ª≠ t√¨m theo c√°ch kh√°c...");
                    
                    // Th·ª≠ t√¨m t·∫•t c·∫£ elements con
                    var allElements = dialog.FindAllDescendants(cf => cf.ByControlType(ControlType.Window)
                        .Or(cf.ByControlType(ControlType.Pane)).Or(cf.ByControlType(ControlType.Custom))
                        .Or(cf.ByControlType(ControlType.Button)).Or(cf.ByControlType(ControlType.Hyperlink))
                        .Or(cf.ByControlType(ControlType.Image)).Or(cf.ByControlType(ControlType.Text)));
                    Console.WriteLine($"üîç T√¨m th·∫•y {allElements.Length} elements t·ªïng c·ªông");
                    
                    // Log m·ªôt s·ªë elements ƒë·∫ßu ti√™n ƒë·ªÉ debug
                    for (int i = 0; i < Math.Min(allElements.Length, 10); i++)
                    {
                        try
                        {
                            var element = allElements[i];
                            var elementName = element.Name ?? "NO NAME";
                            var elementType = element.ControlType.ToString();
                            var elementClassName = AutomationHelper.GetSafeClassName(element);
                            
                            Console.WriteLine($"üîç Element {i + 1}: Name='{elementName}', Type={elementType}, Class='{elementClassName}'");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"‚ùå L·ªói khi ƒë·ªçc element {i + 1}: {ex.Message}");
                        }
                    }
                    
                    // Th·ª≠ t√¨m theo t√™n "close", "X", "Close"
                    var closeByName = allElements.FirstOrDefault(e => 
                    {
                        try
                        {
                            var name = e.Name?.ToLower() ?? "";
                            return name.Contains("close") || name.Contains("x") || name == "close";
                        }
                        catch { return false; }
                    });
                    
                    if (closeByName != null)
                    {
                        Console.WriteLine($"‚úÖ T√¨m th·∫•y n√∫t ƒë√≥ng theo t√™n: '{closeByName.Name}'");
                        return closeByName;
                    }
                }
                
                // Log t·∫•t c·∫£ controls ƒë·ªÉ debug
                for (int i = 0; i < allControls.Length; i++)
                {
                    var control = allControls[i];
                    try
                    {
                        var className = AutomationHelper.GetSafeClassName(control);
                        var controlName = control.Name ?? "NO NAME";
                        var controlType = control.ControlType.ToString();
                        
                        Console.WriteLine($"üîç Control {i + 1}: Name='{controlName}', Type={controlType}, Class='{className}'");
                        
                        if (!string.IsNullOrEmpty(className))
                        {
                            var classNameLower = className.ToLower();
                            foreach (var specificClass in specificClassNames)
                            {
                                // T√¨m ki·∫øm CH√çNH X√ÅC class name, kh√¥ng ph·∫£i contains
                                if (classNameLower.Equals(specificClass.ToLower()))
                                {
                                    Console.WriteLine($"‚úÖ T√¨m th·∫•y n√∫t ƒë√≥ng theo class name CH√çNH X√ÅC: '{className}' (Name: '{controlName}')");
                                    return control;
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"‚ùå L·ªói khi ƒë·ªçc control {i + 1}: {ex.Message}");
                    }
                }
                
                Console.WriteLine("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y control n√†o c√≥ class name CH√çNH X√ÅC 'btn-close no-outline'");
                return null;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi t√¨m theo class name c·ª• th·ªÉ: {ex.Message}");
                return null;
            }
        }

        public static void AutoEnterProject(Window mainWindow)
        {
            try
            {
                Console.WriteLine("üîç B∆Ø·ªöC 3: T·ª± ƒë·ªông v√†o project...");
                
                // Ch·ªù ng·∫Øn h∆°n ƒë·ªÉ Revit ·ªïn ƒë·ªãnh
                System.Threading.Thread.Sleep(200); // Gi·∫£m t·ª´ 1000ms xu·ªëng 200ms
                
                // Method 1: T√¨m Recent Projects (∆ØU TI√äN CAO NH·∫§T) - GI·ªÆ L·∫†I
                Console.WriteLine("üîç T√¨m Recent Projects (∆∞u ti√™n cao nh·∫•t)...");
                var recentProject = FindRecentProject(mainWindow);
                if (recentProject != null)
                {
                    Console.WriteLine($"‚úÖ T√¨m th·∫•y project g·∫ßn ƒë√¢y: '{recentProject.Name}'");
                    try
                    {
                        Console.WriteLine("üñ±Ô∏è ƒêang click v√†o project g·∫ßn ƒë√¢y...");
                        recentProject.Click();
                        System.Threading.Thread.Sleep(500); // Gi·∫£m t·ª´ 2000ms xu·ªëng 500ms
                        Console.WriteLine("‚úÖ ƒê√£ click v√†o project g·∫ßn ƒë√¢y th√†nh c√¥ng");
                        return;
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"‚ùå L·ªói khi click project g·∫ßn ƒë√¢y: {ex.Message}");
                    }
                }
                else
                {
                    Console.WriteLine("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y Recent Projects");
                }
                
                // Method 2: T√¨m Available Projects (TR√ÅNH AUTODESK CLOUD) - GI·ªÆ L·∫†I
                Console.WriteLine("üîç T√¨m Available Projects (tr√°nh Autodesk cloud)...");
                var availableProject = FindAvailableProject(mainWindow);
                if (availableProject != null)
                {
                    Console.WriteLine($"‚úÖ T√¨m th·∫•y project c√≥ s·∫µn: '{availableProject.Name}'");
                    try
                    {
                        Console.WriteLine("üñ±Ô∏è ƒêang click v√†o project c√≥ s·∫µn...");
                        availableProject.Click();
                        System.Threading.Thread.Sleep(500); // Gi·∫£m t·ª´ 2000ms xu·ªëng 500ms
                        Console.WriteLine("‚úÖ ƒê√£ click v√†o project c√≥ s·∫µn th√†nh c√¥ng");
                        return;
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"‚ùå L·ªói khi click project c√≥ s·∫µn: {ex.Message}");
                    }
                }
                else
                {
                    Console.WriteLine("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y Available Projects");
                }
                
                // Method 3: T·∫°o project m·ªõi (TR√ÅNH AUTODESK CLOUD) - GI·ªÆ L·∫†I
                Console.WriteLine("üîç Kh√¥ng t√¨m th·∫•y project n√†o, t·∫°o project m·ªõi (tr√°nh Autodesk cloud)...");
                var newProjectButton = FindNewProjectButton(mainWindow);
                if (newProjectButton != null)
                {
                    Console.WriteLine($"‚úÖ T√¨m th·∫•y n√∫t t·∫°o project m·ªõi: '{newProjectButton.Name}'");
                    try
                    {
                        Console.WriteLine("üñ±Ô∏è ƒêang click v√†o n√∫t t·∫°o project m·ªõi...");
                        newProjectButton.Click();
                        System.Threading.Thread.Sleep(200); // Gi·∫£m t·ª´ 1000ms xu·ªëng 200ms
                        Console.WriteLine("‚úÖ ƒê√£ click v√†o n√∫t t·∫°o project m·ªõi th√†nh c√¥ng");
                        
                        // Ch·ªù dialog t·∫°o project m·ªõi xu·∫•t hi·ªán
                        System.Threading.Thread.Sleep(200); // Gi·∫£m t·ª´ 1000ms xu·ªëng 200ms
                        
                        // X·ª≠ l√Ω dialog t·∫°o project m·ªõi n·∫øu c√≥
                        HandleNewProjectDialog(mainWindow);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"‚ùå L·ªói khi click n√∫t t·∫°o project m·ªõi: {ex.Message}");
                    }
                }
                else
                {
                    Console.WriteLine("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t t·∫°o project m·ªõi");
                }
                
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi t·ª± ƒë·ªông v√†o project: {ex.Message}");
            }
        }

        private static void HandleNewProjectDialog(Window mainWindow)
        {
            try
            {
                Console.WriteLine("üîç X·ª≠ l√Ω dialog t·∫°o project m·ªõi...");
                
                // T√¨m dialog t·∫°o project m·ªõi
                var newProjectDialog = mainWindow.FindFirstDescendant(cf => 
                    cf.ByControlType(ControlType.Window).And(cf.ByName("New Project")));
                
                if (newProjectDialog == null)
                {
                    newProjectDialog = mainWindow.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.Window).And(cf.ByName("Create New Project")));
                }
                
                if (newProjectDialog == null)
                {
                    newProjectDialog = mainWindow.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.Window).And(cf.ByName("Project Template")));
                }
                
                if (newProjectDialog != null)
                {
                    Console.WriteLine($"‚úÖ T√¨m th·∫•y dialog t·∫°o project m·ªõi: '{newProjectDialog.Name}'");
                    
                    // T√¨m template "None" ho·∫∑c "Empty Project"
                    var noneTemplate = newProjectDialog.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.ListItem).And(cf.ByName("None")));
                    
                    if (noneTemplate == null)
                    {
                        noneTemplate = newProjectDialog.FindFirstDescendant(cf => 
                            cf.ByControlType(ControlType.ListItem).And(cf.ByName("Empty Project")));
                    }
                    
                    if (noneTemplate == null)
                    {
                        noneTemplate = newProjectDialog.FindFirstDescendant(cf => 
                            cf.ByControlType(ControlType.ListItem).And(cf.ByName("No template")));
                    }
                    
                    if (noneTemplate != null)
                    {
                        Console.WriteLine($"‚úÖ T√¨m th·∫•y template 'None': '{noneTemplate.Name}'");
                        try
                        {
                            Console.WriteLine("üñ±Ô∏è ƒêang click v√†o template 'None'...");
                            noneTemplate.Click();
                            System.Threading.Thread.Sleep(2000);
                            Console.WriteLine("‚úÖ ƒê√£ click v√†o template 'None' th√†nh c√¥ng");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"‚ùå L·ªói khi click template 'None': {ex.Message}");
                        }
                    }
                    
                    // T√¨m n√∫t "OK" ho·∫∑c "Create"
                    var okButton = newProjectDialog.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.Button).And(cf.ByName("OK")));
                    
                    if (okButton == null)
                    {
                        okButton = newProjectDialog.FindFirstDescendant(cf => 
                            cf.ByControlType(ControlType.Button).And(cf.ByName("Create")));
                    }
                    
                    if (okButton == null)
                    {
                        okButton = newProjectDialog.FindFirstDescendant(cf => 
                            cf.ByControlType(ControlType.Button).And(cf.ByName("Finish")));
                    }
                    
                    if (okButton != null)
                    {
                        Console.WriteLine($"‚úÖ T√¨m th·∫•y n√∫t t·∫°o project: '{okButton.Name}'");
                        try
                        {
                            Console.WriteLine("üñ±Ô∏è ƒêang click n√∫t t·∫°o project...");
                            okButton.Click();
                            System.Threading.Thread.Sleep(3000);
                            Console.WriteLine("‚úÖ ƒê√£ click n√∫t t·∫°o project th√†nh c√¥ng");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"‚ùå L·ªói khi click n√∫t t·∫°o project: {ex.Message}");
                        }
                    }
                }
                else
                {
                    Console.WriteLine("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y dialog t·∫°o project m·ªõi");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi x·ª≠ l√Ω dialog t·∫°o project m·ªõi: {ex.Message}");
            }
        }

        private static AutomationElement? FindAvailableProject(Window mainWindow)
        {
            try
            {
                Console.WriteLine("üîç T√¨m Available Projects (tr√°nh Autodesk cloud)...");
                
                // T√¨m t·∫•t c·∫£ c√°c control c√≥ th·ªÉ l√† project
                var allControls = mainWindow.FindAllDescendants(cf => 
                    cf.ByControlType(ControlType.ListItem).Or(cf.ByControlType(ControlType.Hyperlink))
                    .Or(cf.ByControlType(ControlType.Button)).Or(cf.ByControlType(ControlType.Text)));
                
                foreach (var control in allControls)
                {
                    try
                    {
                        var name = control.Name;
                        if (!string.IsNullOrEmpty(name))
                        {
                            // KI·ªÇM TRA QUAN TR·ªåNG: Tr√°nh Autodesk cloud
                            if (name.Contains("Autodesk") || name.Contains("cloud") || name.Contains("Cloud") || 
                                name.Contains("You currently don't have access") || name.Contains("Revit cloud models"))
                            {
                                Console.WriteLine($"‚ö†Ô∏è B·ªè qua Autodesk cloud: '{name}'");
                                continue;
                            }
                            
                            // Ki·ªÉm tra xem c√≥ ph·∫£i l√† project kh√¥ng
                            if (name.EndsWith(".rvt") || 
                                name.Contains("Project") || 
                                name.Contains("Revit") ||
                                name.Contains("Architectural") ||
                                name.Contains("Structural") ||
                                name.Contains("MEP") ||
                                name.Contains("Template"))
                            {
                                Console.WriteLine($"‚úÖ T√¨m th·∫•y project c√≥ s·∫µn: '{name}'");
                                return control;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"‚ùå L·ªói khi ƒë·ªçc t√™n project: {ex.Message}");
                    }
                }
                
                Console.WriteLine("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y Available Projects");
                return null;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi t√¨m Available Project: {ex.Message}");
                return null;
            }
        }

        private static AutomationElement? FindRecentProject(Window mainWindow)
        {
            try
            {
                Console.WriteLine("üîç T√¨m Recent Projects...");
                
                // T√¨m section "Recent" tr∆∞·ªõc
                var recentSection = mainWindow.FindFirstDescendant(cf => 
                    cf.ByControlType(ControlType.Group).And(cf.ByName("Recent")));
                
                if (recentSection == null)
                {
                    recentSection = mainWindow.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.Group).And(cf.ByName("Recent Projects")));
                }
                
                if (recentSection == null)
                {
                    recentSection = mainWindow.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.Pane).And(cf.ByName("Recent")));
                }
                
                if (recentSection == null)
                {
                    recentSection = mainWindow.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.Pane).And(cf.ByName("Recent Projects")));
                }
                
                if (recentSection != null)
                {
                    Console.WriteLine($"‚úÖ T√¨m th·∫•y section Recent: '{recentSection.Name}'");
                    
                    // T√¨m project ƒë·∫ßu ti√™n trong Recent section
                    var recentProjects = recentSection.FindAllDescendants(cf => 
                        cf.ByControlType(ControlType.ListItem).Or(cf.ByControlType(ControlType.Hyperlink))
                        .Or(cf.ByControlType(ControlType.Button)).Or(cf.ByControlType(ControlType.Text)));
                    
                    foreach (var project in recentProjects)
                    {
                        try
                        {
                            var name = project.Name;
                            if (!string.IsNullOrEmpty(name) && 
                                (name.EndsWith(".rvt") || name.Contains("Project") || name.Contains("Revit")))
                            {
                                Console.WriteLine($"‚úÖ T√¨m th·∫•y project trong Recent: '{name}'");
                                return project;
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"‚ùå L·ªói khi ƒë·ªçc t√™n project: {ex.Message}");
                        }
                    }
                }
                else
                {
                    Console.WriteLine("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y section Recent, t√¨m tr·ª±c ti·∫øp...");
                }
                
                // T√¨m tr·ª±c ti·∫øp n·∫øu kh√¥ng t√¨m th·∫•y section
                var allProjects = mainWindow.FindAllDescendants(cf => 
                    cf.ByControlType(ControlType.ListItem).Or(cf.ByControlType(ControlType.Hyperlink))
                    .Or(cf.ByControlType(ControlType.Button)).Or(cf.ByControlType(ControlType.Text)));
                
                foreach (var project in allProjects)
                {
                    try
                    {
                        var name = project.Name;
                        if (!string.IsNullOrEmpty(name) && 
                            (name.EndsWith(".rvt") || name.Contains("Project") || name.Contains("Revit")))
                        {
                            Console.WriteLine($"‚úÖ T√¨m th·∫•y project: '{name}'");
                            return project;
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"‚ùå L·ªói khi ƒë·ªçc t√™n project: {ex.Message}");
                    }
                }
                
                Console.WriteLine("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y Recent Projects");
                return null;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi t√¨m Recent Project: {ex.Message}");
                return null;
            }
        }

        private static AutomationElement? FindNewProjectButton(Window mainWindow)
        {
            try
            {
                Console.WriteLine("üîç T√¨m n√∫t t·∫°o project m·ªõi (tr√°nh Autodesk cloud)...");
                
                // T√¨m c√°c n√∫t c√≥ th·ªÉ t·∫°o project m·ªõi - TR√ÅNH AUTODESK CLOUD
                var newProjectButtons = mainWindow.FindAllDescendants(cf => 
                    cf.ByControlType(ControlType.Button).And(cf.ByName("New")));
                
                if (newProjectButtons.Length > 0)
                {
                    Console.WriteLine($"‚úÖ T√¨m th·∫•y {newProjectButtons.Length} n√∫t t·∫°o project m·ªõi");
                    foreach (var button in newProjectButtons)
                    {
                        try
                        {
                            var buttonName = button.Name ?? "NO NAME";
                            // KI·ªÇM TRA QUAN TR·ªåNG: Tr√°nh Autodesk cloud
                            if (buttonName.Contains("Autodesk") || buttonName.Contains("cloud") || buttonName.Contains("Cloud"))
                            {
                                Console.WriteLine($"‚ö†Ô∏è B·ªè qua n√∫t Autodesk cloud: '{buttonName}'");
                                continue;
                            }
                            
                            Console.WriteLine($"  - N√∫t: '{buttonName}' (Type: {button.ControlType})");
                            return button; // Tr·∫£ v·ªÅ n√∫t ƒë·∫ßu ti√™n kh√¥ng ph·∫£i Autodesk cloud
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"‚ùå L·ªói khi ƒë·ªçc n√∫t: {ex.Message}");
                        }
                    }
                }
                
                // T√¨m theo t√™n ch·ª©a t·ª´ kh√≥a - TR√ÅNH AUTODESK CLOUD
                var allButtons = mainWindow.FindAllDescendants(cf => cf.ByControlType(ControlType.Button));
                foreach (var button in allButtons)
                {
                    try
                    {
                        var name = button.Name?.ToLower() ?? "";
                        // KI·ªÇM TRA QUAN TR·ªåNG: Tr√°nh Autodesk cloud
                        if (name.Contains("autodesk") || name.Contains("cloud"))
                        {
                            continue;
                        }
                        
                        if (name.Contains("new") || name.Contains("create") || name.Contains("start") || name.Contains("project"))
                        {
                            Console.WriteLine($"‚úÖ T√¨m th·∫•y n√∫t t·∫°o project theo t·ª´ kh√≥a: '{button.Name}'");
                            return button;
                        }
                    }
                    catch { }
                }
                
                Console.WriteLine("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y n√∫t t·∫°o project m·ªõi");
                return null;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi t√¨m n√∫t t·∫°o project m·ªõi: {ex.Message}");
                return null;
            }
        }

        public static bool IsProjectLoaded(Window mainWindow)
        {
            try
            {
                Console.WriteLine("üîç Ki·ªÉm tra xem project ƒë√£ load ch∆∞a...");
                
                // Ki·ªÉm tra xem c√≥ tab n√†o hi·ªÉn th·ªã kh√¥ng (d·∫•u hi·ªáu project ƒë√£ load)
                var tabs = mainWindow.FindAllDescendants(cf => cf.ByControlType(ControlType.TabItem));
                
                if (tabs.Length > 0)
                {
                    Console.WriteLine($"‚úÖ T√¨m th·∫•y {tabs.Length} tabs, project ƒë√£ load th√†nh c√¥ng");
                    return true;
                }
                
                // Ki·ªÉm tra xem c√≥ ribbon bar kh√¥ng
                var ribbonBar = mainWindow.FindFirstDescendant(cf => 
                    cf.ByControlType(ControlType.ToolBar).And(cf.ByName("Ribbon")));
                
                if (ribbonBar != null)
                {
                    Console.WriteLine("‚úÖ T√¨m th·∫•y Ribbon bar, project ƒë√£ load th√†nh c√¥ng");
                    return true;
                }
                
                // Ki·ªÉm tra xem c√≥ menu bar kh√¥ng
                var menuBar = mainWindow.FindFirstDescendant(cf => 
                    cf.ByControlType(ControlType.MenuBar));
                
                if (menuBar != null)
                {
                    Console.WriteLine("‚úÖ T√¨m th·∫•y Menu bar, project ƒë√£ load th√†nh c√¥ng");
                    return true;
                }
                
                Console.WriteLine("‚ÑπÔ∏è Ch∆∞a th·∫•y d·∫•u hi·ªáu project ƒë√£ load");
                return false;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi ki·ªÉm tra project load: {ex.Message}");
                return false;
            }
        }

        public static void HandleSecurityDialogInSetup(UIA3Automation automation)
        {
            try
            {
                Console.WriteLine("üîç B∆Ø·ªöC 2: T√¨m security dialog...");
                
                var desktop = automation.GetDesktop();
                
                // T√¨m security dialog v·ªõi timeout ng·∫Øn h∆°n
                var securityDialog = desktop.FindFirstDescendant(cf => 
                    cf.ByControlType(ControlType.Window).And(cf.ByName("Security - Unsigned Add-In")));
                
                if (securityDialog == null)
                {
                    Console.WriteLine("üîç Kh√¥ng t√¨m th·∫•y 'Security - Unsigned Add-In', th·ª≠ t√¨m t√™n kh√°c...");
                    securityDialog = desktop.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.Window).And(cf.ByName("Security")));
                }
                
                if (securityDialog == null)
                {
                    Console.WriteLine("üîç Kh√¥ng t√¨m th·∫•y 'Security', th·ª≠ t√¨m t√™n kh√°c...");
                    securityDialog = desktop.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.Window).And(cf.ByName("Add-In Security")));
                }
                
                if (securityDialog != null)
                {
                    Console.WriteLine($"‚úÖ T√¨m th·∫•y security dialog: '{securityDialog.Name}'");
                    
                    var loadOnceButton = securityDialog.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.Button).And(cf.ByName("Load Once")));
                    
                    if (loadOnceButton != null)
                    {
                        Console.WriteLine("‚úÖ T√¨m th·∫•y n√∫t 'Load Once'");
                        try
                        {
                            Console.WriteLine("üñ±Ô∏è ƒêang click 'Load Once'...");
                            loadOnceButton.Click();
                            System.Threading.Thread.Sleep(300); // Gi·∫£m t·ª´ 1000ms xu·ªëng 300ms
                            Console.WriteLine("‚úÖ ƒê√£ click 'Load Once' th√†nh c√¥ng");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"‚ùå L·ªói khi click 'Load Once': {ex.Message}");
                        }
                    }
                    else
                    {
                        Console.WriteLine("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t 'Load Once'");
                        // X√ìA: Log t·∫•t c·∫£ buttons - kh√¥ng c·∫ßn thi·∫øt, l√†m ch·∫≠m test
                    }
                }
                else
                {
                    Console.WriteLine("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y security dialog n√†o");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói x·ª≠ l√Ω security dialog: {ex.Message}");
            }
        }

        public static bool HandleTrialDialog(Window mainWindow)
        {
            try
            {
                Console.WriteLine("üîç ƒêang t√¨m dialog trial t·ª´ main window...");
                
                // T√¨m trial dialog t·ª´ main window tr∆∞·ªõc
                var webViewDialog = mainWindow.FindFirstDescendant(cf => 
                    cf.ByControlType(ControlType.Window).And(cf.ByAutomationId("QApplication.WebView2BrowserDlg")));
                
                if (webViewDialog == null)
                {
                    webViewDialog = mainWindow.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.Window).And(cf.ByName("WebView2 WebBrowser")));
                }
                
                // N·∫øu kh√¥ng t√¨m th·∫•y t·ª´ main window, t√¨m t·ª´ desktop
                if (webViewDialog == null)
                {
                    Console.WriteLine("üîç Kh√¥ng t√¨m th·∫•y t·ª´ main window, t√¨m t·ª´ desktop...");
                    var desktop = mainWindow.Automation.GetDesktop();
                    webViewDialog = desktop.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.Window).And(cf.ByAutomationId("QApplication.WebView2BrowserDlg")));
                }
                
                if (webViewDialog == null)
                {
                    var desktop = mainWindow.Automation.GetDesktop();
                    webViewDialog = desktop.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.Window).And(cf.ByName("WebView2 WebBrowser")));
                }
                
                // T√¨m c√°c lo·∫°i trial dialog kh√°c
                if (webViewDialog == null)
                {
                    var desktop = mainWindow.Automation.GetDesktop();
                    webViewDialog = desktop.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.Window).And(cf.ByName("Trial")));
                }
                
                if (webViewDialog == null)
                {
                    var desktop = mainWindow.Automation.GetDesktop();
                    webViewDialog = desktop.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.Window).And(cf.ByName("Evaluation")));
                }
                
                if (webViewDialog != null)
                {
                    Console.WriteLine($"‚úÖ T√¨m th·∫•y trial dialog: '{webViewDialog.Name}'");
                    
                    // T√¨m n√∫t ƒë√≥ng v·ªõi logic m·ªõi
                    var closeButton = FindCloseButtonInDialog(webViewDialog);
                    
                    if (closeButton != null)
                    {
                        Console.WriteLine($"‚úÖ T√¨m th·∫•y n√∫t ƒë√≥ng: '{closeButton.Name}' (Type: {closeButton.ControlType})");
                        try
                        {
                            Console.WriteLine("üñ±Ô∏è ƒêang click n√∫t ƒë√≥ng...");
                            closeButton.Click();
                            System.Threading.Thread.Sleep(3000);
                            Console.WriteLine("‚úÖ ƒê√£ click n√∫t ƒë√≥ng th√†nh c√¥ng");
                            return true;
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"‚ùå L·ªói khi click n√∫t ƒë√≥ng: {ex.Message}");
                            return true;
                        }
                    }
                    else
                    {
                        Console.WriteLine("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t ƒë√≥ng");
                        return true;
                    }
                }
                else
                {
                    Console.WriteLine("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y trial dialog n√†o");
                    return false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi x·ª≠ l√Ω trial dialog: {ex.Message}");
                return false;
            }
        }

        public static bool HandleSecurityDialog(Window mainWindow)
        {
            try
            {
                Console.WriteLine("üîç ƒêang t√¨m security dialog t·ª´ main window...");
                
                // T√¨m t·ª´ main window tr∆∞·ªõc
                var securityDialog = mainWindow.FindFirstDescendant(cf => 
                    cf.ByControlType(ControlType.Window).And(cf.ByName("Security - Unsigned Add-In")));
                
                if (securityDialog == null)
                {
                    securityDialog = mainWindow.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.Window).And(cf.ByName("Security")));
                }
                
                if (securityDialog == null)
                {
                    securityDialog = mainWindow.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.Window).And(cf.ByName("Add-In Security")));
                }
                
                // N·∫øu kh√¥ng t√¨m th·∫•y t·ª´ main window, t√¨m t·ª´ desktop
                if (securityDialog == null)
                {
                    Console.WriteLine("üîç Kh√¥ng t√¨m th·∫•y t·ª´ main window, t√¨m t·ª´ desktop...");
                    var desktop = mainWindow.Automation.GetDesktop();
                    securityDialog = desktop.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.Window).And(cf.ByName("Security - Unsigned Add-In")));
                }
                
                if (securityDialog == null)
                {
                    var desktop = mainWindow.Automation.GetDesktop();
                    securityDialog = desktop.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.Window).And(cf.ByName("Security")));
                }
                
                if (securityDialog != null)
                {
                    Console.WriteLine($"‚úÖ T√¨m th·∫•y security dialog: '{securityDialog.Name}'");
                    
                    var loadOnceButton = securityDialog.FindFirstDescendant(cf => 
                        cf.ByControlType(ControlType.Button).And(cf.ByName("Load Once")));
                    
                    if (loadOnceButton != null)
                    {
                        Console.WriteLine("‚úÖ T√¨m th·∫•y n√∫t 'Load Once', ƒëang click...");
                        try
                        {
                            Console.WriteLine("üñ±Ô∏è ƒêang click 'Load Once'...");
                            loadOnceButton.Click();
                            System.Threading.Thread.Sleep(3000);
                            Console.WriteLine("‚úÖ ƒê√£ click 'Load Once' th√†nh c√¥ng");
                            return true;
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"‚ùå L·ªói khi click 'Load Once': {ex.Message}");
                            return false;
                        }
                    }
                    else
                    {
                        Console.WriteLine("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t 'Load Once'");
                        return false;
                    }
                }
                else
                {
                    Console.WriteLine("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y security dialog n√†o");
                    return false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi x·ª≠ l√Ω security dialog: {ex.Message}");
                return false;
            }
        }
    }
}
